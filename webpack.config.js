//@ts-check
/* eslint-disable @typescript-eslint/no-var-requires */
const path = require("path");
const webpack = require("webpack");
const MonacoWebpackPlugin = require("monaco-editor-webpack-plugin");
const MiniCssExtractPlugin = require("mini-css-extract-plugin");
const HtmlWebpackPlugin = require("html-webpack-plugin");
const ForkTsCheckerWebpackPlugin = require("fork-ts-checker-webpack-plugin");
const ReactRefreshWebpackPlugin = require("@pmmmwh/react-refresh-webpack-plugin");
const TerserPlugin = require("terser-webpack-plugin");

/**
 * @param {Record<string, string>} env Values passed in --env flag.
 * @param {Record<string, string>} argv All flags passed to webpack.
 * @returns {webpack.Configuration}
 */
module.exports = (env, argv) => {
  const isDevelopment = argv.mode === "development";

  // Get the current commit hash to inject into the app
  // https://stackoverflow.com/a/38401256
  const commitHash = require("child_process").execSync("git rev-parse --short HEAD").toString().trim();

  return {
    context: __dirname,
    devServer: {
      hot: true,
      port: 8000,
      static: {
        directory: path.resolve(__dirname, "dist"),
        publicPath: "/dist/",
      },
    },
    devtool: isDevelopment ? false : "source-map",
    entry: {
      main: "./src/index.tsx",
    },
    mode: isDevelopment ? "development" : "production",
    module: {
      rules: [
        {
          test: /\.[jt]sx?$/,
          exclude: /[\\/]node_modules[\\/]/,
          use: {
            loader: "babel-loader",
            options: {
              cacheDirectory: true,
              plugins: isDevelopment ? [require.resolve("react-refresh/babel")] : [],
            },
          },
        },
        {
          test: /\.css$/,
          use: [MiniCssExtractPlugin.loader, "css-loader"],
        },
        {
          test: /\.(png|jpe?g|gif|jp2|ttf|webp)$/,
          type: "asset",
        },
      ],
    },
    optimization: {
      minimizer: [
        new TerserPlugin({
          // Disable the output of *.LICENSE.txt files.
          extractComments: false,
        }),
      ],
      splitChunks: {
        cacheGroups: {
          vendor: {
            chunks: "all",
            name: "vendor",
            test: /[\\/]node_modules[\\/]/,
          },
        },
      },
    },
    output: {
      assetModuleFilename: "images/[hash][ext][query]",
      hashDigestLength: 32, // for compatibility
      filename: "[name].bundle.js",
    },
    performance: {
      // Stop webpack complaining about file size.
      hints: false,
    },
    plugins: [
      new webpack.DefinePlugin({
        __COMMIT_HASH__: JSON.stringify(commitHash || "DEV"),
      }),
      new HtmlWebpackPlugin({
        title: "Bitburner",
        template: "src/index.html",
        filename: isDevelopment ? "index.html" : "../index.html",
        favicon: "favicon.ico",
        googleAnalytics: !isDevelopment && {
          trackingId: "UA-100157497-1",
        },
        minify: !isDevelopment && {
          collapseBooleanAttributes: true,
          includeAutoGeneratedTags: false,
          quoteCharacter: '"',
        },
      }),
      new MiniCssExtractPlugin(),
      new MonacoWebpackPlugin({
        languages: ["javascript", "typescript"],
      }),
      new ForkTsCheckerWebpackPlugin({
        typescript: {
          diagnosticOptions: {
            semantic: true,
            syntactic: true,
          },
        },
      }),
      // In dev mode, use a faster method of create sourcemaps
      // while keeping lines/columns accurate
      isDevelopment &&
        new webpack.EvalSourceMapDevToolPlugin({
          // Exclude vendor files from sourcemaps
          // This is a huge speed improvement for not much loss
          exclude: /[\\/]node_modules[\\/]/,
        }),
      isDevelopment && new ReactRefreshWebpackPlugin(),
    ].filter(Boolean),
    resolve: {
      alias: {
        // Don't load editor.main.js, as we ship a subset of monaco.
        "monaco-editor$": "monaco-editor/esm/vs/editor/editor.api.js",
        // It's always nice when you don't have to use relative paths everywhere.
        "src": path.resolve(__dirname, "src/"),
      },
      extensions: [".tsx", ".ts", ".jsx", ".js"],
      fallback: {
        "crypto": path.resolve(__dirname, "src/bcryptjs-crypto-fallback.js"),
      },
    },
    target: "web",
  };
};
